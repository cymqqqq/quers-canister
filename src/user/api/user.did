type Answer = record {
  down_thumb : nat32;
  answer_id : text;
  answer_content : text;
  up_thumb : nat32;
  answer_date : text;
  comments : vec record { text; Comment };
  answer_pid : text;
};
type Args = record {
  answer_content : text;
  question_id : text;
  answer_pid : principal;
};
type Args_1 = record {
  comment_content : text;
  answer_pid : principal;
  comment_pid : principal;
};
type Args_10 = record { owner : principal; holders : nat32 };
type Args_11 = record { owner : principal; holding : nat32 };
type Args_12 = record { tvl : nat32; owner : principal };
type Args_2 = record {
  question_title : text;
  question_asker : principal;
  question_logo : opt text;
  question_description : text;
  tags : vec text;
  question_image : opt text;
};
type Args_3 = record { question_id : text };
type Args_4 = record { answer_pid : principal };
type Args_5 = record { question_id : text };
type Args_6 = record { owner : principal };
type Args_7 = record { owner : principal };
type Args_8 = record { owner : principal; description : text };
type Args_9 = record { owner : principal; followers : nat32 };
type Comment = record {
  comment_content : text;
  down_comment : nat32;
  comment_date : text;
  comment_pid : text;
  up_comment : nat32;
  comment_id : text;
};
type Profile = record {
  tvl : nat32;
  owner : text;
  qa_mod : QuesAns;
  description : text;
  acount_id : text;
  holders : nat32;
  holding : nat32;
  followers : nat32;
};
type QuesAns = record { answers : vec text; questions : vec text };
type Question = record {
  question_title : text;
  question_date : text;
  down_thumb : nat32;
  question_asker : text;
  question_logo : opt text;
  question_description : text;
  answers : vec record { text; Answer };
  tags : vec text;
  up_thumb : nat32;
  question_image : opt text;
  question_id : text;
};
type Response = variant { Success; AnswerInvalid };
type Response_1 = variant { QuestionInvalid; Success };
type Response_10 = variant { Success; HoldersInvalid };
type Response_11 = variant { Success; HoldersInvalid };
type Response_12 = variant { TvlInvalid; Success };
type Response_13 = variant { TvlInvalid; Success };
type Response_2 = variant { Success : SuccessResult };
type Response_3 = variant { Success : SuccessResult_1 };
type Response_4 = variant { Success : SuccessResult_2 };
type Response_5 = variant { Success : SuccessResult_3 };
type Response_6 = variant { Success : SuccessResult_4 };
type Response_7 = variant { Success : SuccessResult_5 };
type Response_8 = variant { Success; PrincipalInvalid };
type Response_9 = variant { DescriptionInvalid; Success };
type SuccessResult = record { answer_list : vec Answer };
type SuccessResult_1 = record { comment_list : vec Comment };
type SuccessResult_2 = record { question_list : vec Question };
type SuccessResult_3 = record { question : Question };
type SuccessResult_4 = record { profile : Profile };
type SuccessResult_5 = record { "principal" : principal };
service : {
  add_new_answer : (Args) -> (Response);
  add_new_comment : (Args_1) -> (Response);
  add_new_question : (Args_2) -> (Response_1);
  get_all_answers_list_by_question_id : (Args_3) -> (Response_2) query;
  get_all_comment_list : (Args_4) -> (Response_3) query;
  get_all_question_list : (record {}) -> (Response_4) query;
  get_question_by_id : (Args_5) -> (Response_5) query;
  get_user_profile : (Args_6) -> (Response_6) query;
  init_state : (Args_7) -> (Response_7) query;
  set_user_principal : (Args_7) -> (Response_8);
  update_profile_description : (Args_8) -> (Response_9);
  update_user_followers : (Args_9) -> (Response_10);
  update_user_holders : (Args_10) -> (Response_11);
  update_user_holding : (Args_11) -> (Response_12);
  update_user_tvl : (Args_12) -> (Response_13);
}